import config
import telebot
import qrcode
from telebot import types

qr_function = False

def generate_qr_code(word):
    content = word
    qr = qrcode.make(content)
    qr.save("last_qr_code.png")

bot = telebot.TeleBot(config.TOKEN)

@bot.message_handler(commands=['start','back'])
def start_message(message):
    global qr_function
    user_name = message.from_user.first_name
    markup = types.InlineKeyboardMarkup(row_width=2)

    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {user_name} üëä")
    bot.send_message(message.chat.id, "–Ø –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–æ–≤ üòé")

    button1 = types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å QR-–ö–æ–¥", callback_data='button1')
    button2 = types.InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã", callback_data='button2')
    markup.add(button1, button2)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    global qr_function
    if call.data == 'button1':
        bot.answer_callback_query(call.id, text="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ —Å–ª–æ–≤–æ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å QR-–ö–æ–¥")
        qr_function = True
    elif call.data == 'button2':
        bot.answer_callback_query(call.id, text="–î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è - /back")

@bot.message_handler(func=lambda message: qr_function)
def handle_qr_code_request(message):
    global qr_function
    user_request = message.text
    if user_request == '/stop':
        qr_function = False
    bot.send_message(message.chat.id, f"QR-–ö–æ–¥ –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞: {message.text}")
    generate_qr_code(user_request)
    with open('D:/Visual Studio(Code)/Python/TelegramBotQr/last_qr_code.png', 'rb') as photo:
        bot.send_photo(message.chat.id, photo)
bot.infinity_polling()
